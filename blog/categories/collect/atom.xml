<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Collect | Creative Coding]]></title>
  <link href="http://sammysteiner.github.io/blog/categories/collect/atom.xml" rel="self"/>
  <link href="http://sammysteiner.github.io/"/>
  <updated>2017-04-14T09:39:07-04:00</updated>
  <id>http://sammysteiner.github.io/</id>
  <author>
    <name><![CDATA[Sammy Steiner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What's Going on With Find, Map, and Collect in Ruby]]></title>
    <link href="http://sammysteiner.github.io/blog/2017/03/21/whats-going-on-with-each-map-and-collect-in-ruby/"/>
    <updated>2017-03-21T16:21:57-04:00</updated>
    <id>http://sammysteiner.github.io/blog/2017/03/21/whats-going-on-with-each-map-and-collect-in-ruby</id>
    <content type="html"><![CDATA[<h2>When should we use each vs. map or hash on Ruby Arrays?</h2>

<p>If you&rsquo;re like me, you&rsquo;ve done some weird things with the <em>each</em> method in Ruby arrays. One thing I used to do was create a new array in my method, iterate over the array passed in to the method as an argument and shovel the return value into my new array. That is a useful code smell to look out for when refactoring. But that is unnecessary since we have the <em>map</em> and <em>collect</em> methods! I didn&rsquo;t understand how to use those methods, when to use them instead of <em>each</em>, and what they would return.</p>

<p>FYI for the rest of the post, I&rsquo;m going to use &ldquo;<em>map</em>&rdquo; instead of <em>map</em> and <em>collect</em> because <em>map</em> and <em>collect</em> are identical. That is, they do the exact same thing. The only difference is that &ldquo;map&rdquo; is 3 characters to type but &ldquo;collect&rdquo; is more descriptive as to what’s going. You can think of it like we&rsquo;re collecting our new array elements and returning that collection as an array.</p>

<p>If you&rsquo;re trying to do all that with <em>each</em> but adding on some <em>if</em> statements to determine what you&rsquo;re shoveling, you should look at some other methods like <em>find</em>, <em>select</em>, and many others!</p>

<h2>Yield is awesome!</h2>

<p>First, lets talk about what these iterator methods are doing. In order to dig into that, we need to discuss the <em>yield</em> keyword. <em>Yield</em> is a way to pass a block of code into an method with the arguments. For example, to demonstrate how <em>yield</em> interrupts a method to call on a separate block:</p>

<pre><code class="ruby">def interrupt_this_method(number)
    puts "thing one"
    puts yield(number)
    puts "thing two"
end

interrupt_this_method(3) {|i| i * 2}

#=&gt;
‘thing one’
6
‘thing two’
</code></pre>

<p>The <em>yield</em> stops the method from putting the second statement until it has a chance to call whatever argument we passed into the method with the arguments in the block on the argument we pass into <em>yield</em>. We can use <em>yield</em> with a looping method like <em>while</em> to emulate our <em>each</em> and <em>map</em> methods to get under the hood.</p>

<h2>What is going on with Each?</h2>

<p>Now we’ll write our own <em>each</em> method, without using “<em>each</em>.” Aside from giving us some insight into what’s actually happening with our <em>each</em> method, it will show us how much time our higher level methods are saving us.</p>

<pre><code class="ruby">def generic_each_array_method_with_iterator(array)
  i = 0
  while i &lt; array.length
    yield array[i]
        i = i + 1
  end
  array
end
</code></pre>

<p>So far, we have a generic method that takes an array as an argument, as well as a block of code, sets the variable i to 0 and operates our code on each element of our array, adding 1 to the i variable, between each iteration, and stopping the <em>yield</em> when we’ve hit all the elements. We then return the original array that was passed in. We can use this to pass any block into our method with any array. Let’s give it a try:</p>

<pre><code class="ruby">generic_each_array_method_with_iterator([1, 2, 3, 4, 5]) {|num| puts num * 2}
#=&gt;
2
4
6
8
10
[1,2,3,4,5]
</code></pre>

<p>That’s exactly what we get when we hard code the block into our method using <em>each</em>.</p>

<pre><code class="ruby">def times_two(array)
  array.each {|num| puts num * 2}
end

times_two([1, 2, 3, 4, 5])
#=&gt;
2
4
6
8
10
[1,2,3,4,5]
</code></pre>

<p>Pretty cool, right! The <em>each</em> method allows us to user the elements in our array, and return the original array. As you can see, the <em>each</em> method is really easy to write, but a lot less flexible than the <em>yield</em> method. That is fine because we don’t want to keep writing code strings to pass in with our arguments every time we want to use a method.</p>

<h2>What&rsquo;s going on with Map?</h2>

<p>Let’s take a look at how <em>map</em> works. This is our generic <em>map</em> method that relies on <em>yield</em>, instead of the explicitly calling on <em>map</em>.</p>

<pre><code class="ruby">def generic_map_array_method_with_iterator(array)
  new_array = []
  i = 0
  while i &lt; array.length
    new_array &lt;&lt; yield(array[i])
        i = i + 1
  end
  new_array
end
</code></pre>

<p>The difference here, from our generic <em>each</em> method, is that we’re creating a new array at the start of our method. Then, we shovel the results of our yielded block into the new array instead of just executing those blocks. At the end of the method, we return the new_array instead of the original array. So for the following argument and block this is what we’ll get:</p>

<pre><code class="ruby">generic_map_array_method_with_iterator([1,2,3,4,5]) {|num| num * 2}
#=&gt;  [2, 4, 6, 8, 10]
</code></pre>

<p>That’s exactly what we get when we hard code our block into a map/collect method</p>

<pre><code class="ruby">def multiply_array_elements_by_two(array)
  array.map {|num| num * 2}
end

multiply_array_elements_by_two([1,2,3,4,5])
#=&gt; [2, 4, 6, 8, 10]
</code></pre>

<p>Sweet!</p>

<h3>TL;DR</h3>

<p><em>Map</em> and <em>collect</em> are identical methods. If you want to perform some action on variables, call other methods depending on our array elements, etc., use <em>each</em>. If you want to return a new array based on some manipulation of your array, use <em>map</em>.</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
</feed>
