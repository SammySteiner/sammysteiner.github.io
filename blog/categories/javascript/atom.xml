<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Creative Coding]]></title>
  <link href="http://sammysteiner.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://sammysteiner.github.io/"/>
  <updated>2017-07-28T19:29:06-04:00</updated>
  <id>http://sammysteiner.github.io/</id>
  <author>
    <name><![CDATA[Sammy Steiner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Big O]]></title>
    <link href="http://sammysteiner.github.io/blog/2017/07/28/the-big-o/"/>
    <updated>2017-07-28T17:47:08-04:00</updated>
    <id>http://sammysteiner.github.io/blog/2017/07/28/the-big-o</id>
    <content type="html"><![CDATA[<h2>What is the O?</h2>

<p>As a developer working with real world systems, it is not always enough to solve the problem. We need to solve the problem as efficiently as possible. That means reducing the cost of our calculations. In order to think about this, we need some vocabulary, so let&rsquo;s define our terms.</p>

<p>Cost is being valued in the number of calculations the computer must do in a worst case scenario. This is another way of expressing <a href="https://en.wikipedia.org/wiki/Time_complexity">Time Complexity</a> in computer science. For example, if we have a function that looks at every letter of a string, the cost of the function is equal to the length of the string in the worst case, ie. where the function must go through the entire string before concluding.</p>

<p>That cost in the worst case scenario is called the &ldquo;Big O&rdquo;. In the example above, the Big O is represented by O(n) where &lsquo;n&rsquo; is the length of the string.</p>

<h2>How do we calculate it?</h2>

<p>As the complexity of our inputs grow, how many more calculations does the computer have to go through to complete the function in the worst case scenario? That is what we&rsquo;re looking to calculate. When calculating this, we&rsquo;re only interested in the exponential growth, since linear or even geometric growth isn&rsquo;t going to have a large impact on performance.</p>

<p>Mostly, we&rsquo;re looking for how many times our function will need to loop through our inputs, whether they are arrays, linked lists, hashes or antying else.</p>

<p>Let&rsquo;s take a couple of simple functions and talk through the Big O.</p>

<h2>What are some common examples?</h2>

<p>Big O(n)</p>

<pre><code>function simpleSearch(target, array)  {
  for(var i = 0; i &lt; array.length; i++) {
    if(target === array[i]){
      return i
    }
  }
}
</code></pre>

<p>In the example above, in the worst case scenario our target is the last element in the array. If that were the case, our simpleSearch function would have to go through the entire array one time in order to complete its task. Because of that, the number of potential computations grows proportionally with the length of the array. Hence the Big O is &lsquo;n&rsquo;.</p>

<p>Big O(n<sup>2</sup>)</p>

<pre><code>function sumSearch(target, array)  {
  var sums = []
  for(var i = 0; i &lt; array.length; i++) {
    for(var j = 0; j &lt; array.length; j++) {
      if(i + j === target){
        sums.push([i, j])
      }
    }
  }
  return sums
}
</code></pre>

<p>In the example above, our function needs to go through the entire array every time is called. For each number in the array, it then needs to check each number in the array to see if the add up to the target. That nested loop within our loop means that the growth of the calculations necessary to complete the function grow at a rate of &lsquo;n&rsquo; * &lsquo;n&rsquo; with the growth of the length of the array.</p>

<p>Let&rsquo;s end with another popular one, a binary search. Keep in mind that one requirement for a binary search is that the array is already sorted.</p>

<p>Big O(log(n))</p>

<pre><code>function binarySearch(target, array){
  var min = 0
  var max = array.length - 1
  while( min &lt;= max ){
    var guess = Math.floor( (min + max) / 2)
    if(target === array[guess]){
      return guess
    } else if( array[guess] &lt; target ) {
      min = guess + 1
    } else if( array[guess] &gt; target ){
      max = guess - 1
    }
  }
}
</code></pre>

<p>In this example, we&rsquo;re cutting the length of the array in half every time we check the value. So if we have an array with 10 elements, we&rsquo;re only looking up 4 elements in the worst case scenario. Which means that we&rsquo;re performing less calculations than the total number elements in the array. That&rsquo;s pretty cool!</p>

<h2>Conclusion</h2>

<p>There are lots of ways to solve a problem with code and they are not all equal. After solving the problem you&rsquo;re working on, spend the time working out the Big O of the method and see if you can come up with something better.</p>

<p>Good luck and happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Can I Work With HTML Collections?]]></title>
    <link href="http://sammysteiner.github.io/blog/2017/07/20/how-can-i-work-with-html-collections/"/>
    <updated>2017-07-20T08:52:36-04:00</updated>
    <id>http://sammysteiner.github.io/blog/2017/07/20/how-can-i-work-with-html-collections</id>
    <content type="html"><![CDATA[<h2>What are HTML Collections?</h2>

<p>In vanilla javascript, when selecting elements from the DOM, either through <code>document.getElementById</code>, <code>document.getElementsByClassName</code>, <code>document.getElementsByName</code>, <code>document.getElementsByTagName</code>, or <code>document.getElementsByTagNameNS</code> the return value is an HTML collection. This is important because even though it looks like an array, it does not have the same prototypical methods. Also, and more importantly they are live DOM objects, meaning that if you modify them, you are directly modifying the DOM.</p>

<h2>What do we get for free?</h2>

<p>First off, the ability to modify the DOM directly is very useful but also a great place for bugs to slip in, so be careful in how you use it.</p>

<p>We also get access to one property and a several methods:
1. HTML collections have a &lsquo;length&rsquo; property that can be called with <code>collection.length</code>, and it returns the number of elements in the collection.
2. HTML collections have an &lsquo;item()&rsquo; method that can be called with <code>collection.item(index number of the item)</code>, and it returns the element at that index. If the index doesn&rsquo;t exist, it will return &lsquo;null&rsquo;.
3. HTML collections have a &lsquo;namedItem()&rsquo; method that can be called with <code>collection.namedItem(id or name)</code>, and it returns the element in the collection with the corresponding &lsquo;id&rsquo; or if that doesn&rsquo;t find anything, with the corresponding &lsquo;name.&rsquo;</p>

<h2>What don&rsquo;t we get for free?</h2>

<p>An HTML collection is not an array, and that means we don&rsquo;t have all the great array methods like, &lsquo;forEach&rsquo;, &lsquo;map&rsquo;, &lsquo;filter&rsquo;, etc. So how do we iterate over the collection?</p>

<p>First, you should know that there was something I didn&rsquo;t mention in the &lsquo;what do we get for free&rsquo; section, we can still use bracket notation to access elements in our collection! What&rsquo;s the difference between that an the item method? If you try an access an element with an index that doesn&rsquo;t exist, item() will return null and bracket notation will return undefined.</p>

<p>With bracket notation, we can use a for loop:
<code>
for (var i = 0; i &lt; collection.length; i++) {
  /* do something with collection[i] */
}
</code></p>

<p>Alternatively, there is a way to convert a collection to an array, curtesy of <a href="https://stackoverflow.com/questions/222841/most-efficient-way-to-convert-an-htmlcollection-to-an-array">harpo</a> on stackoverflow.</p>

<p>with ECMAScript 5.1 and below:
<code>
var collectionArr = [].slice.call(collection)
</code></p>

<p>with ECMAScript 6 and above:
<code>
var collectionArr = Array.from(collection)
</code></p>

<p>Now you can operate on each collection element as if it were an element of this new array. You will still modify the DOM when you change these values.</p>

<h2>Conclusion</h2>

<p>A question that has come up a few times for me while working with vanilla javascript is when to work with an HTML collection as a collection vs. converting it to an array and working with it that way. I think this comes down to two considerations. First, is your goal to modify the DOM for some or all of the elements in the collection? If so, working with it as a collection seems more direct, and might be more efficient, though I haven&rsquo;t seen a difference in practice. Second, if what you need to do can be accomplished in a simple &lsquo;for loop&rsquo;, then great, no need to convert it to an array. Otherwise, converting it to an array will probably save more headaches than the line of code necessary to convert it.</p>

<p>Good luck, hope this helps, and happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Listening to Javascript: Adding Events]]></title>
    <link href="http://sammysteiner.github.io/blog/2017/07/14/listening-to-javascript-adding-events/"/>
    <updated>2017-07-14T15:03:14-04:00</updated>
    <id>http://sammysteiner.github.io/blog/2017/07/14/listening-to-javascript-adding-events</id>
    <content type="html"><![CDATA[<h2>Getting good at listening</h2>

<p>This seems to keep coming up in code challenges so I wanted to write about it. Usually this is a piece of a larger challenge, but sometimes these questions are really basic. Sometimes these questions get weird, like in a totally real interview I had:</p>

<p>Interviewer: I want a button to create an alert on the screen.<br/>
Me: Ok. Does this button submit a form, and is that what the alert is for? Should the alert display a message depending on where the user clicked or the state of the page?<br/>
Interviewer: No.<br/>
Me: Ok, great. I&rsquo;ve got my laptop right here, I can do this in the console on a live webpage, maybe wikipedia.<br/>
( I&rsquo;ve already got the wikipedia page for Dolphins open and I&rsquo;m pressing &lsquo;option&rsquo; + &lsquo;command&rsquo; + &lsquo;j&rsquo; )<br/>
Interviewer: No. On paper. And with all the HTML for a webpage, with the header and body information.
Me: Ok, ( a little deflated )</p>

<p>So let&rsquo;s review how to add an event listeners in javascript and see if we can find some more depth here too. Read to the end for some bonus event listener things with React.js.</p>

<h2>Adding event listeners</h2>

<p>We need a few things in order to add an event listener. First, what do we want to attach the listener to? In vanilla javascript, we can user our <code>document.getElementBy...</code> functions to select a specific tag, class, name, or id. Second, we&rsquo;ll need to know what kind of event to listen to, ie. a &lsquo;click&rsquo;, &lsquo;submit&rsquo;, &lsquo;mouseover&rsquo;, or something else. There&rsquo;s a great list of all the events <a href="https://www.w3schools.com/jsref/dom_obj_event.asp">here</a>. Finally, we need a function. In the interview mentioned above, it was a simple alert message, however, we can do a lot here. We can even call named functions. Ok, the real last thing is whether we want our event propagation to capture or bubble, we&rsquo;ll get into that a bit later.</p>

<p>Ok, we&rsquo;re ready to start coding this up.</p>

<h2>It&rsquo;s console time</h2>

<p>Let&rsquo;s add some listeners to the wikipedia page for <a href="https://en.wikipedia.org/wiki/Dolphin">Dolphins</a>, they&rsquo;re super smart animals and we should be listening to them.</p>

<p>Open up the console and type:
<code>
document.getElementById('mw-content-text').addEventListener('click', function(){alert('hi')})
</code>
Now click any of the interesting dolphin information. Yay, we get an alert with our message.</p>

<p>Note: if we try and remove the event listener with <code>document.getElementById('mw-content-text').removeEventListener('click', function(){alert('hi')})
</code>, that won&rsquo;t work because the remove event listener method only works with named functions. Our alert function is an anonymous function. But don&rsquo;t worry! If you want to get rid of that event handler, you just need to refresh the page.</p>

<h2>Who&rsquo;s up first: propagation</h2>

<p>If we add the following listeners to our page, what do you think will happen when we click a paragraph?</p>

<pre><code>document.getElementById('mw-content-text').addEventListener('click', function(){alert('hi')}, true)
document.getElementsByClassName('mw-body')[0].addEventListener('click', function(){alert('hello')}, true)
document.getElementById('mw-content-text').addEventListener('click', function(){alert('why, hello there')}, false)
document.getElementsByClassName('mw-body')[0].addEventListener('click', function(){alert('salutations')}, false)
</code></pre>

<p>When you click you&rsquo;ll see:
1. &lsquo;hello&rsquo;
2. &lsquo;hi&rsquo;
3. &lsquo;why, hello there&rsquo;
4. &lsquo;salutations&rsquo;</p>

<p>The reason for this is that events  bubble by default, which means we start with the most deeply nested element&rsquo;s event, and go up the chain from there. When we set the capture variable to &lsquo;true&rsquo;, we instead start with the outermost DOM element and work our way down. We also see from this experiment that events that are captured take precedent over those that aren&rsquo;t. You can experiment by implementing these listeners in different orders, but the outcome will be the same.</p>

<h2>Alternatives ( and why not to use them )</h2>

<p>You can also do this inline in your HTML element with an &lsquo;onclick&rsquo; variable set to a function. This is not ideal as it could take your website longer to render, which would negatively impact the user experience.</p>

<p>Alternatively, you can add an inline listener in javascript with:
<code>
document.getElementById('mw-content-text').onclick = function(){alert('this works!')}
</code></p>

<p>However, this will overwrite any other listeners written this way and this method doesn&rsquo;t allow you to control the propagation. Bonus question: if you add this to the dolphins page, what will the new order be?</p>

<h2>We want to see the HTML</h2>

<p>For closure, this is what a simple html page would look like if it just had a button that created an alert:</p>

<pre><code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;Code Challenge&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;button type='btn' id='alert'&gt;Alert Button&lt;/button&gt;
  &lt;script&gt;
    document.getElementById('alert').addEventListener('click', function(event) { alert('hello') } )
  &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>This was pretty basic, but there are much more fun code challenges out there. One I tried recently that was tricky and fun is this one from <a href="https://taco-spolsky.github.io/">Trello</a>. Have fun and happy coding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Forms in React: Part 2]]></title>
    <link href="http://sammysteiner.github.io/blog/2017/07/05/dynamic-forms-in-react-part-2/"/>
    <updated>2017-07-05T11:14:22-04:00</updated>
    <id>http://sammysteiner.github.io/blog/2017/07/05/dynamic-forms-in-react-part-2</id>
    <content type="html"><![CDATA[<h2>Recap of Part 1</h2>

<p>In <a href="https://sammysteiner.github.io/blog/2017/07/02/dynamic-forms-in-react/">Part 1</a>, we talked about simple forms in React. Namely, we talked about controlling inputs, updating state, and handling submissions. All of that assumes our form is static and we know the shape of our state. &lsquo;Shape&rsquo; in this context means the data contained in the state object, the keys, the types of values, etc.</p>

<p>In part two, we&rsquo;re going to talk about a more complex form. This form needs a way to update itself, and because we want to control the inputs, the form needs a way to update the state. Finally, when we send off our state object to an API, we need to know how to deconstruct that state regardless of how many phases and actions a user added to our form.</p>

<p>Here&rsquo;s our gif from Part 1 to demonstrate the kind of form interaction we&rsquo;re going for:
<img src="/assets/goalForm.gif" alt="Dynamic form gif" /></p>

<h2>Designing the Form UX</h2>

<p>When writing code in react, I find it helpful to start with the design I want to implement. Starting from the design makes it really easy for me to think through the components I want to build, now to nest them, and what props they&rsquo;ll need to work with.</p>

<p>The first part of the form i pretty standard. Each goal should have a title and a description. I find it really helpful to think about the description as the motivation behind the goal. ie. &ldquo;I want to go to the gym twice a week to get in shape for the summer.&rdquo; or &ldquo;I want to go get ready to run a half marathon by September.&rdquo; I find it&rsquo;s really helpful to break down big goals into manageable bits of work, and give myself a set amount of time to finish my task. Deadlines are my friend!</p>

<p>This tells me I want a button in my form to add a &ldquo;phase&rdquo;. A phase should have a timeframe, a number of days within which I need to complete this task, and a button to create actions. Each time I press this button, I need a new input for a description of an action. So we are creating dynamic inputs inside dynamically created inputs in a form with controlled inputs. That was a pretty scary problem to start with. But I knew my next step and it seemed like a fun thought challenge. How do I model this data?</p>

<h2>Modeling the Data</h2>

<p>The process of defining my state took a couple iterations to determine the best way to structure my data so it would play nicely with my database and wouldn&rsquo;t require more looping than necessary. I started with what was going to be static, since that was pretty simple.</p>

<pre><code>  state = {
    title: '',
    description: '',
    repeat: false,
    // Some way to show all our goals
  }
</code></pre>

<p>Great that&rsquo;s three quarters of our state defined! We&rsquo;re 75% done with this.</p>

<p>We&rsquo;re going to want to have a list of goals, in order so we know which comes first, second, etc. That means we want an array of goals. Each element of our goal array is going to need a phase length and a list of actions. That means each element of our goal array is going to be an object with two keys, &ldquo;phase&rdquo; and &ldquo;actions&rdquo;. Actions is going to be a list of descriptions, that sounds like an array.</p>

<p>Writing that out gives us this:</p>

<pre><code>goals: [
  {
    phase: '',
    actions: []
  }
]
</code></pre>

<p>When we start filling this up with goals, our state will eventually look like this:</p>

<pre><code>  state ={
    title: as a string,
    description: as a text area,
    repeat: true of false boolean,
    goals: [
      {
        phase: length as a number,
        actions: [
          description for action 1, description for action 2, etc.
        ]
      },
      {
        phase: length as a number,
        actions: [
          description for action 1, description for action 2, etc.
        ]
      },
      etc.
    ]
  }
</code></pre>

<p>Ok, that looks reasonable! Now that we know what we want the state to look like, and how it will be modified at each step of our user&rsquo;s journey through the form, we can start thinking through the code to make that happen.</p>

<h2>Sudo Code for the Form</h2>

<p>We&rsquo;re just going to sudo code this for the blog because the actual code gets very long, and a bit hairy because I decided to put it inside a modal. If you want to check out the actual code, you can find a link to my repo <a href="https://github.com/SammySteiner/habits-client">here</a>.</p>

<pre><code>  &lt;form onSubmit={send our form data to the API}&gt;
    &lt;input type='text' name='title' value={this.state.title} onChange={update the state with this change}/&gt;
    &lt;input type='text' name='description' value={this.state.title} onChange={update the state with this change}/&gt;
    &lt;input type='textArea' name='repeat' value={this.state.description} onChange={update the state with this change}/&gt;
    &lt;input type='checkbox' checked={this.state.repeat} onChange={update the state with this change}/&gt;
    &lt;button type='button' onClick={ call our add phase function }&gt;Add Phase&lt;/button&gt;
    &lt;input type='submit' value='submit' name='Create Goal'/&gt;
    &lt; render all the Goal components based on the goals in the state &gt;
  &lt;/form&gt;

  addPhaseFunction(){
    copy the state
    add a new element to the goals array with the object we described above
  }
</code></pre>

<p>Then we need to import a goal component that maps over each element of the goals array and displays a phase input that is controlled by the value of the phase key in the object of the goals array. We also need to pass that input a function to update the phase in the state on change.</p>

<p>Additionally our goal component needs to show a button similar to the &ldquo;Add Phase&rdquo; button, but this one will say Add action. It only needs to update the state by pushing an empty string onto the actions array in the  object.</p>

<p>Finally, our goal component needs to map over the action components and display in input for each of them. It then needs to use that element in the actions array to control the state and pass that input a function to update that state.</p>

<p>This should update our state dynamically, add goal objects to our goals array, add action descriptions to the actions array of it&rsquo;s associated goals in the goals array. Our form component will keep updating every time the state is set by showing the new components with the new buttons and inputs they are mapping over. And Voila, it works!</p>

<h2>Conclusion</h2>

<p>There are some pretty cool things you can do with react. This form was a really fun challenge, and I&rsquo;m really proud of what I built and I learned a lot in the process. If you want to check out the app in action, you can find it <a href="https://habits-sammy-steiner.herokuapp.com/">here</a> hosted on heroku for free, so I apologize for the loading time.</p>

<p>Thanks for checking it out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Forms in React: Part 1, Regular React Forms]]></title>
    <link href="http://sammysteiner.github.io/blog/2017/07/02/dynamic-forms-in-react/"/>
    <updated>2017-07-02T22:11:18-04:00</updated>
    <id>http://sammysteiner.github.io/blog/2017/07/02/dynamic-forms-in-react</id>
    <content type="html"><![CDATA[<h2>What is a Nested Dynamic Form</h2>

<p>Sometimes a form needs to expect the unexpected. When that happens, when the user needs freedom and flexibility, old-school forms just wont cut it. For <a href="habits-sammy-steiner.herokuapp.comhttps://sammysteiner.github.io/blog/2017/07/05/dynamic-forms-in-react-part-2/">Habits</a>, I wanted to give the user the ability to add as many fields to the form as they needed to express their goal.</p>

<p>Habits is an activity tracking app that is part accountability through gamificaiton, part exploration of the quantified self, and part guided self betterment. When using the Goal creation form, users are encouraged to give their goal a name, as well as a brief description or motivational sentence. Then, users are asked to divide their goal into smaller, more manageable chunks, divided into phases of time, and each phase is comprised of various actions. When the goal is created, the user&rsquo;s inputs are translated into a card that allows them to check off what they&rsquo;ve accomplished toward their goal, divides up the work according to their schedule, and gives them insights into their progress.</p>

<p>In order to cover all that, our form needs to be very special. This is what it&rsquo;s going to look like:</p>

<p><img src="/assets/goalForm.gif" alt="Dynamic form gif" /></p>

<p>But we won&rsquo;t get to that in this post. In this post, we will go through the basics of React forms to get us up to speed for what&rsquo;s coming in our next post.</p>

<h2>Standard Javascript Forms</h2>

<p>Let&rsquo;s build a simple from to accept a &lsquo;name&rsquo; input from the user and send if off to our database, in vanilla Javascript. Here&rsquo;s what our form would look like.</p>

<pre><code>&lt;form id="goal-form"&gt;
  &lt;input type="text" id="name" name="name" /&gt;  
  &lt;input type="submit" value="submit"&gt;
&lt;/form&gt;
</code></pre>

<p>Next we need to create an event handler on window.load to listen for the submit event and hanle sending our information to the api.</p>

<pre><code>document.querySelector("#goal-form").addEventListener("submit", function(e){
    e.preventDefault()    
    // stop the form from submitting and refreshing the page
    // you can add some validations here
    var name = document.getElementById('name').value
    return createGoal(name)
    // calling some function that sends a post request to our api with the value of the name input.    
})
</code></pre>

<p>That&rsquo;s one way to do things in vanilla Javascript. It&rsquo;s messy, slow, and not very efficient. Things can get even crazier when there are lots of elements on your page. Searching through all those DOM nodes can get expensive. And when we want to do something dynamic in our form, like in the example above, this process can get very complicated very quickly. React gives us a better way.</p>

<h2>Controlled inputs</h2>

<p>In React, we try and stay away from the DOM, and use the virtual DOM instead. This means that when we go and look at what the user entered in our form, instead of checking for the form input values in the DOM, we store it in temporary memory, in the React component&rsquo;s state, and just grab it from there when we&rsquo;re ready.</p>

<p>Our React state for a name input looks like this:</p>

<pre><code>...
export default class GoalForm extends Component {
  constructor(){
    super()
    this.state = {
      name: ''
    }
  }
}
...
</code></pre>

<p>All this does is create a GoalForm class component in React with a state object that has a value of &lsquo;name&rsquo;, which points to an empty string.</p>

<p>Instead of having the React component store the information of the user&rsquo;s input and have the user&rsquo;s input be stored in the DOM, which would break the single source of truth convention, we just have the component&rsquo;s value display the state. That is called a controlled input.</p>

<p>Our form looks like this:</p>

<pre><code>&lt;form onSubmit={this.handleSubmit.bind(this)}&gt;
  &lt;input label='name' type='text' value={this.state.name} onChange={this.handleChange.bind(this)} /&gt;
  &lt;input type='submit' value='submit' /&gt;
&lt;/form&gt;
</code></pre>

<p>This form has one text input field for a name, that shows the value of the name object in the component&rsquo;s state. When a user enters something in the input field, that input is intercepted by our handleChange function, which updates the state, the Component is re-rendered, and the new state is shown as the value.</p>

<h2>Handling Changes and form Submission</h2>

<p>Our handleSubmit and handleChange functions look like this:</p>

<pre><code>handleSubmit(e){
  e.preventDefault()
  this.props.createGoal(this.state.name)
  // this is a function passed down from another component via props. In this case, it will send a post request to an api with the 'name' the user entered.
  this.setState({name: ''})
  // this.setState is a React function that sets the state of the current component to the argument that is passed in and it also forces the component to re-render.
}

handleChange(e){
  e.preventDefault()
  this.setState({name: e.target.value })
}
</code></pre>

<h2>Conclusion</h2>

<p>This is a lot to wrap your head around, controlled inputs, preventing a lot of default actions, completely sidestepping the DOM! I know, it&rsquo;s a lot. But it&rsquo;s about to get crazier. In part two, we&rsquo;ll discuss how to give the user the ability to dynamically add inputs in this controlled system. Stay tuned for <a href="https://sammysteiner.github.io/blog/2017/07/05/dynamic-forms-in-react-part-2/">Part II</a>.</p>
]]></content>
  </entry>
  
</feed>
