<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithm | Creative Coding]]></title>
  <link href="http://sammysteiner.github.io/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://sammysteiner.github.io/"/>
  <updated>2017-07-28T19:29:06-04:00</updated>
  <id>http://sammysteiner.github.io/</id>
  <author>
    <name><![CDATA[Sammy Steiner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Big O]]></title>
    <link href="http://sammysteiner.github.io/blog/2017/07/28/the-big-o/"/>
    <updated>2017-07-28T17:47:08-04:00</updated>
    <id>http://sammysteiner.github.io/blog/2017/07/28/the-big-o</id>
    <content type="html"><![CDATA[<h2>What is the O?</h2>

<p>As a developer working with real world systems, it is not always enough to solve the problem. We need to solve the problem as efficiently as possible. That means reducing the cost of our calculations. In order to think about this, we need some vocabulary, so let&rsquo;s define our terms.</p>

<p>Cost is being valued in the number of calculations the computer must do in a worst case scenario. This is another way of expressing <a href="https://en.wikipedia.org/wiki/Time_complexity">Time Complexity</a> in computer science. For example, if we have a function that looks at every letter of a string, the cost of the function is equal to the length of the string in the worst case, ie. where the function must go through the entire string before concluding.</p>

<p>That cost in the worst case scenario is called the &ldquo;Big O&rdquo;. In the example above, the Big O is represented by O(n) where &lsquo;n&rsquo; is the length of the string.</p>

<h2>How do we calculate it?</h2>

<p>As the complexity of our inputs grow, how many more calculations does the computer have to go through to complete the function in the worst case scenario? That is what we&rsquo;re looking to calculate. When calculating this, we&rsquo;re only interested in the exponential growth, since linear or even geometric growth isn&rsquo;t going to have a large impact on performance.</p>

<p>Mostly, we&rsquo;re looking for how many times our function will need to loop through our inputs, whether they are arrays, linked lists, hashes or antying else.</p>

<p>Let&rsquo;s take a couple of simple functions and talk through the Big O.</p>

<h2>What are some common examples?</h2>

<p>Big O(n)</p>

<pre><code>function simpleSearch(target, array)  {
  for(var i = 0; i &lt; array.length; i++) {
    if(target === array[i]){
      return i
    }
  }
}
</code></pre>

<p>In the example above, in the worst case scenario our target is the last element in the array. If that were the case, our simpleSearch function would have to go through the entire array one time in order to complete its task. Because of that, the number of potential computations grows proportionally with the length of the array. Hence the Big O is &lsquo;n&rsquo;.</p>

<p>Big O(n<sup>2</sup>)</p>

<pre><code>function sumSearch(target, array)  {
  var sums = []
  for(var i = 0; i &lt; array.length; i++) {
    for(var j = 0; j &lt; array.length; j++) {
      if(i + j === target){
        sums.push([i, j])
      }
    }
  }
  return sums
}
</code></pre>

<p>In the example above, our function needs to go through the entire array every time is called. For each number in the array, it then needs to check each number in the array to see if the add up to the target. That nested loop within our loop means that the growth of the calculations necessary to complete the function grow at a rate of &lsquo;n&rsquo; * &lsquo;n&rsquo; with the growth of the length of the array.</p>

<p>Let&rsquo;s end with another popular one, a binary search. Keep in mind that one requirement for a binary search is that the array is already sorted.</p>

<p>Big O(log(n))</p>

<pre><code>function binarySearch(target, array){
  var min = 0
  var max = array.length - 1
  while( min &lt;= max ){
    var guess = Math.floor( (min + max) / 2)
    if(target === array[guess]){
      return guess
    } else if( array[guess] &lt; target ) {
      min = guess + 1
    } else if( array[guess] &gt; target ){
      max = guess - 1
    }
  }
}
</code></pre>

<p>In this example, we&rsquo;re cutting the length of the array in half every time we check the value. So if we have an array with 10 elements, we&rsquo;re only looking up 4 elements in the worst case scenario. Which means that we&rsquo;re performing less calculations than the total number elements in the array. That&rsquo;s pretty cool!</p>

<h2>Conclusion</h2>

<p>There are lots of ways to solve a problem with code and they are not all equal. After solving the problem you&rsquo;re working on, spend the time working out the Big O of the method and see if you can come up with something better.</p>

<p>Good luck and happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Game: Generate Unique and Random X and Y Coordinates]]></title>
    <link href="http://sammysteiner.github.io/blog/2017/06/04/generate-unique-and-random-x-and-y-coordinates/"/>
    <updated>2017-06-04T12:39:18-04:00</updated>
    <id>http://sammysteiner.github.io/blog/2017/06/04/generate-unique-and-random-x-and-y-coordinates</id>
    <content type="html"><![CDATA[<h2>Why would I need some random coordinates?</h2>

<p>I want to build a game. This game is going to have a dungeon, represented by tiles on a game board, and it will be randomly populated with a door, a key, a bunch of monsters and the player&rsquo;s starting position. My database schema is expecting an &lsquo;x&rsquo; and &lsquo;y&rsquo; coordinates for each of these, but to make my game work, I need to make sure that none of these start off on the same square. It wouldn&rsquo;t be very challenging if the key and door could appear on the same spot. It wouldn&rsquo;t be fun if the player spawned on the same tile as a monster and lost the game immediately! There are lots of reasons you might want to generate a number of unique &lsquo;x&rsquo; and &lsquo;y&rsquo; coordinates for a grid of a given size, this would work for all of them.</p>

<h2>What do I want my result to look like?</h2>

<p>We&rsquo;re going to start simple and build out more complexity as we get things working. As I said, I need a coordinate for the door, a key, the player and some monsters, that&rsquo;s a minimum of four coordinates and we need a board that is two squares by two squares to fit everything. In this case, I&rsquo;m using all the possible coordinates, so I want my final outcome to look something like this hash of info:
<code>
game_coordinates = {
  player: {x: 1, y: 1},
  door: {x:1, y:2},
  key: {x:2, y:1},
  monster: [
  {x: 2, y: 2}
  ]
}
</code></p>

<p>Let&rsquo;s zoom in on the first problem we want to solve. Getting ourselves the list of unique &lsquo;x&rsquo; and &lsquo;y&rsquo; coordinates. This sounds like we want to use an array, which we would ultimately need to iterate over to assign values. For now, our array should look like this:
<code>
unique_coordinates = [[1,1], [1,2], [2,1], [2,2]]
</code></p>

<p>We will use this array later to assign the coordinates to the door, key, player, and monster. Let&rsquo;s break down what we are seeing. This isn&rsquo;t one simple array, it&rsquo;s an array of arrays. Each of the nested arrays represents a unique set of &lsquo;x&rsquo; and &lsquo;y&rsquo; coordinates. We can also have two arrays for the x and the y values:
<code>
x_values = [1, 1, 2, 2]
y_values = [1, 1, 2, 2]
</code></p>

<p>If we look a little closer, the arrays shouldn&rsquo;t both be in order like that. In our unique_coordinates array, they &lsquo;x&rsquo; values repeat then increment while the &lsquo;y&rsquo; values increment then repeat. So we want values that look like this:
<code>
x_values = [1, 1, 2, 2]
y_values = [1, 2, 1, 2]
</code></p>

<h2>Let&rsquo;s hard code this to get started</h2>

<p>Now that we have the basic building blocks for our data structure, let&rsquo;s put it together assuming we have the unique values we need. In our two by two grid, with the x_values and y_values arrays, all we need to do is a simple loop to get our unique_coordinates array, and pull off four coordinates at random:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="n">unique_coordinates_generator</span> <span class="o">=</span>
</span><span class='line'><span class="n">x_values</span><span class="o">.</span><span class="n">each_with_index</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>  <span class="o">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y_values</span><span class="o">[</span><span class="n">index</span><span class="o">]]</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;&gt;&gt;&gt; [[1,1], [1,2], [2,1], [2,2]]&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="no">Perfect</span><span class="o">!</span> <span class="no">Just</span> <span class="n">note</span> <span class="n">that</span> <span class="k">if</span> <span class="n">you</span><span class="s1">&#39;re following along, your coordinates may be in a different order, that&#39;</span><span class="n">s</span> <span class="n">exactly</span> <span class="n">what</span> <span class="n">we</span> <span class="n">want</span><span class="o">.</span> <span class="no">They</span> <span class="n">should</span> <span class="n">all</span> <span class="n">be</span> <span class="n">unique</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">To</span> <span class="n">assign</span> <span class="n">each</span> <span class="n">of</span> <span class="n">these</span> <span class="n">to</span> <span class="n">our</span> <span class="n">game</span> <span class="n">board</span> <span class="n">objects</span><span class="p">,</span> <span class="n">we</span> <span class="n">can</span> <span class="k">do</span> <span class="n">this</span> <span class="n">by</span> <span class="n">assigning</span> <span class="n">each</span> <span class="n">a</span> <span class="n">value</span> <span class="n">from</span> <span class="n">the</span> <span class="n">unique_coordinates_generator</span><span class="o">.</span> <span class="no">This</span> <span class="n">isn</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">the</span> <span class="n">prettiest</span> <span class="n">way</span> <span class="n">to</span> <span class="k">do</span> <span class="n">this</span><span class="p">,</span> <span class="n">but</span> <span class="n">it</span> <span class="n">will</span> <span class="n">work</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">player</span> <span class="o">=</span> <span class="n">unique_coordinates_generator</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">door</span> <span class="o">=</span> <span class="n">unique_coordinates_generator</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="n">key</span> <span class="o">=</span> <span class="n">unique_coordinates_generator</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="n">monsters</span> <span class="o">=</span> <span class="o">[</span> <span class="n">unique_coordinates_generator</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>this looks great. The next step is to abstract this to handle grids of any size, with more than four coordinates to accommodate multiple monsters.</p>

<h2>Abstraction</h2>

<p>To state our problem here more simply, we want to create our x_values and y_values arrays for grids larger than two by two. That means, the size of the grid would need to be an argument. Additionally we can infer from the fact that we need to accommodate a variable number of monsters that the number of monsters will also be an argument. So the skeleton of our code should look something like this:
<code>Ruby
def coord_generator(grid_size, number_of_monsters)
  # some code that creates:
  # x values from 1 to the grid size, where we get a 1 the grid_size number of times, followed by a 2 the grid_size number of times, etc.
  # y values that count from 1 to the grid_size number for the grid_size number of times.
  # then we map over the arrays like we did before.
  # finally we sample the array with the number of monsters plus the door, key, and player.
end
</code></p>

<p>Now that we&rsquo;ve stubbed that out in sudo code. It is really easy to translate that to code using some simple ruby operators:</p>

<pre><code class="Ruby">def coord_generator(grid_size, number_of_monsters)
    x_values = ((1..grid_size).to_a * grid_size).sort()
    y_values = ((1..grid_size).to_a * grid_size)
    unique_coordinates = x_values.each_with_index.map do |x, index|
      [x, y_values[index]]
    end
    unique_coordinates.sample(number_of_monsters + 3)
  end
</code></pre>

<h2>Conclusion</h2>

<p>We&rsquo;ve almost finished, but we still have one thing left to do, we need to output our game_coordinates object. To do that, we need to assign the values like we demonstrated above, but we also need to account for having several monsters.</p>

<pre><code class="Ruby">def game_coordinates(grid_size, number_of_monsters)
  unique_coordinates = coord_generator(grid_size, number_of_monsters)
  player = unique_coordinates[0]
  door = unique_coordinates[1]
  key = unique_coordinates[2]
  monsters = []
  number_of_monsters.times do |i|
     monsters &lt;&lt; unique_coordinates[ 3 + i]
  end
  game_coords = {player: {x: player[0], y: player[1]}, door: {x: door[0], y: door[1]}, key: {x: key[0], y: key[1]}, monsters: monsters.map do |monster|
    [x: monster[0], y: monster[1]]
  end}
end
</code></pre>

<p>When we call this method with a grid size of two and one monster, we get the results:</p>

<pre><code class="`"> {
   :player=&gt;{:x=&gt;2, :y=&gt;1},
   :door=&gt;{:x=&gt;1, :y=&gt;1},
   :key=&gt;{:x=&gt;2, :y=&gt;2},
   :monsters=&gt;[[{:x=&gt;1, :y=&gt;2}]]
   }```

When we call this method with a grid size of four and three monsters, we get the results:
</code></pre>

<p> {
   :player=>{:x=>2, :y=>1},
   :door=>{:x=>4, :y=>3},
   :key=>{:x=>4, :y=>2},
   :monsters=>[
    [{:x=>1, :y=>3}], [{:x=>3, :y=>4}], [{:x=>4, :y=>1}]]
  }
  ```</p>

<p>We&rsquo;ve done it! We started with a scary sounding requirement, &ldquo;generate a number of random and unique &lsquo;x&rsquo; and &lsquo;y&rsquo; coordinates for a grid of a given size.&rdquo; We brainstormed about how we wanted the data to look and we divided it into simpler and simpler parts. We broke that down into basic procedural tasks with a hard coded example. Then we abstracted away each of the hard coded parts with information from the requirements, until we produced a general and powerful piece of code.</p>

<p>Good luck and happy coding!</p>
]]></content>
  </entry>
  
</feed>
